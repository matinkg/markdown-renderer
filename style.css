/* markdown-renderer/style.css */
/* --- CSS Variables for Theming --- */
:root {
	--body-bg: #ffffff;
	--body-color: #212529;
	--border-color: #dee2e6;
	--output-bg: #f8f9fa;
	--code-wrapper-bg: #f6f8fa; /* Light theme code background */
	--code-header-bg: #e9ecef;
	--code-header-color: #495057;
	--code-border-color: rgba(0, 0, 0, 0.1);
	--inline-code-bg: rgba(
		175,
		184,
		193,
		0.2
	); /* Default light inline code bg */
	--inline-code-color: inherit; /* Default inline code color */
	--link-color: #0d6efd;
	/* Define a height for the panel headers */
	--panel-header-height: 31px; /* Adjust based on inspection if needed */
}

/* --- Dark Mode Overrides --- */
html[data-bs-theme="dark"] {
	--body-bg: #212529;
	--body-color: #dee2e6;
	--border-color: #495057;
	--output-bg: #343a40;
	--code-wrapper-bg: #282c34;
	--code-header-bg: rgba(0, 0, 0, 0.3);
	--code-header-color: #abb2bf;
	--code-border-color: rgba(255, 255, 255, 0.1);
	--inline-code-bg: rgba(
		110,
		118,
		129,
		0.4
	); /* Default dark inline code bg */
	--inline-code-color: #c9d1d9; /* Default dark inline code color */
	--link-color: #6ea8fe;
}

/* --- General Styles using Variables --- */
body {
	font-family: "Vazirmatn", sans-serif;
	background-color: var(--body-bg);
	color: var(--body-color);
	transition: background-color 0.3s ease, color 0.3s ease;
}

h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: 700;
}
header {
	border-bottom-color: var(--border-color) !important;
}

/* Input/Output areas */
.preview-container {
	min-height: calc(100vh - 100px); /* Default min height */
	align-items: stretch;
}
#input-column > .h-100,
#output-column > .h-100 {
	height: 100%;
}

.panel-header-controls {
	min-height: var(--panel-header-height);
	display: flex;
	align-items: center;
	flex-wrap: wrap;
	gap: 0.5rem;
}
.panel-header-controls#direction-controls-container {
	justify-content: flex-end;
}
.panel-header-controls#markdown-toolbar {
	justify-content: flex-start;
	padding-bottom: 0.5rem !important;
}

#markdown-input {
	font-family: monospace;
	resize: none; /* Changed from none to vertical by default maybe? Re-setting to none */
}

#markdown-output {
	background-color: var(--output-bg);
	border-color: var(--border-color) !important;
	word-wrap: break-word;
	color: var(--body-color);
	transition: background-color 0.3s ease, border-color 0.3s ease;
}

/* --- Text Direction Styling --- */
#markdown-output[data-text-direction="ltr"] {
	direction: ltr;
	text-align: left;
}
#markdown-output[data-text-direction="rtl"] {
	direction: rtl;
	text-align: right;
}
#markdown-output[data-text-direction="rtl"] ul,
#markdown-output[data-text-direction="rtl"] ol {
	padding-right: 2rem;
	padding-left: 0;
}
#markdown-output[data-text-direction="rtl"] blockquote {
	border-right: 0.25em solid var(--border-color);
	border-left: none;
	padding-right: 1rem;
	padding-left: 0;
	margin-right: 0;
	margin-left: 0;
}
#markdown-output a {
	color: var(--link-color);
}
#markdown-output a:hover {
	filter: brightness(85%);
}

/* --- START: Inline Code Styling & Direction --- */
/* Base styling for inline code (outside pre) */
#markdown-output code:not(pre code) {
	padding: 0.2em 0.4em;
	margin: 0;
	font-size: 85%;
	white-space: break-spaces; /* Allow breaking */
	background-color: var(--inline-code-bg); /* optional */
	/* color: var(--inline-code-color) */ /* optional */
	border-radius: 6px;
	display: inline; /* Ensure it remains inline */
	unicode-bidi: embed; /* Needed for direction */
	/* Default direction will be inherited, but we override below */
}
/* LTR direction for inline code */
#markdown-output code:not(pre code)[data-inline-code-direction="ltr"] {
	direction: ltr;
	text-align: left;
}
/* RTL direction for inline code */
#markdown-output code:not(pre code)[data-inline-code-direction="rtl"] {
	direction: rtl;
	text-align: right;
}
/* --- END: Inline Code Styling & Direction --- */

/* --- Code Block Enhancements (``` ```) --- */
.code-block-wrapper {
	position: relative;
	margin-bottom: 1rem;
	background-color: var(--code-wrapper-bg);
	border: 1px solid var(--code-border-color);
	border-radius: 0.3rem;
	overflow: hidden;
	transition: background-color 0.3s ease, border-color 0.3s ease;
}

/* --- Code Block (``` ```) Direction Styling --- */
.code-block-wrapper[data-code-direction="ltr"] {
	direction: ltr;
}
.code-block-wrapper[data-code-direction="rtl"] {
	direction: rtl;
}
.code-block-wrapper[data-code-direction="ltr"] pre,
.code-block-wrapper[data-code-direction="ltr"] code {
	/* Target both */
	text-align: left;
}
.code-block-wrapper[data-code-direction="rtl"] pre,
.code-block-wrapper[data-code-direction="rtl"] code {
	/* Target both */
	text-align: right;
}
.code-block-wrapper[data-code-direction="rtl"] .code-block-header .language {
	text-align: left; /* Keep lang name LTR */
}

/* Code Block Header */
.code-block-header {
	display: flex;
	align-items: center;
	padding: 0.5rem 1rem;
	background-color: var(--code-header-bg);
	color: var(--code-header-color);
	font-size: 0.85em;
	cursor: pointer;
	user-select: none;
	border-bottom: 1px solid var(--code-border-color);
	transition: background-color 0.3s ease, color 0.3s ease,
		border-color 0.3s ease;
	gap: 0.5rem;
}
.code-block-header .language {
	font-weight: bold;
	text-transform: uppercase;
	margin-inline-end: auto;
	margin-inline-start: 0.5rem;
}
.code-block-header .collapse-icon {
	display: inline-flex;
	align-items: center;
}
.code-block-header .collapse-icon::before {
	content: "âˆ’";
	display: inline-block;
	font-weight: bold;
	font-size: 1.2em;
	line-height: 1;
	width: 1em;
	text-align: center;
}
.code-block-wrapper.collapsed .code-block-header .collapse-icon::before {
	content: "+";
}

/* Code Block Pre/Code */
.code-block-wrapper pre {
	margin: 0;
	padding: 1rem;
	border-radius: 0 0 0.3rem 0.3rem;
	overflow-x: auto;
	max-height: 600px; /* Default max height */
	transition: max-height 0.3s ease-out, padding 0.3s ease-out,
		border 0.3s ease-out;
	border-top: none;
}
/* Styling for code inside pre when NOT highlighted */
.code-block-wrapper pre code:not(.hljs) {
	color: var(--body-color);
	background-color: var(--code-wrapper-bg);
	font-family: monospace;
	padding: 0 !important; /* Reset padding for non-hljs */
	display: block; /* Ensure it behaves like a block */
	white-space: pre; /* Keep whitespace for non-hljs too */
}
/* Styling for code inside pre when highlighted */
.code-block-wrapper pre code.hljs {
	padding: 0 !important;
	background: transparent !important;
	display: block;
	line-height: 1.5;
	color: inherit; /* Inherit color from hljs theme */
	white-space: pre; /* Ensure hljs uses pre formatting */
}
.code-block-wrapper.collapsed pre {
	max-height: 0;
	padding-top: 0;
	padding-bottom: 0;
	overflow: hidden;
	border-width: 0;
}

/* Copy Button */
.copy-code-button {
	transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
	font-size: 0.75em !important;
	padding: 0.15rem 0.35rem !important;
	border: none;
	line-height: 1.2;
}
.copy-code-button:hover {
	filter: brightness(90%);
}
.copy-code-button.copied {
	filter: brightness(100%);
}
.copy-code-button .bi {
	vertical-align: text-bottom;
}

/* --- Input Counts Display --- */
#input-counts {
	white-space: nowrap;
}

/* --- Layout Adjustments --- */
#input-column.hidden {
	display: none;
}
#output-column.full-width {
	flex: 0 0 100%;
	max-width: 100%;
}

/* --- Table Styling --- */
#markdown-output table {
	width: 100%;
	max-width: 100%;
	margin-bottom: 1rem;
	border-collapse: collapse;
	background-color: var(--bs-table-bg, var(--body-bg));
	color: var(--bs-table-color, var(--body-color));
}
#markdown-output th,
#markdown-output td {
	border: 1px solid var(--bs-table-border-color, var(--border-color));
	padding: 0.75rem;
	vertical-align: top;
}
#markdown-output thead th {
	vertical-align: bottom;
	border-bottom: 2px solid var(--bs-table-border-color, var(--border-color));
	background-color: var(--bs-table-header-bg, var(--code-header-bg));
	font-weight: 700;
}

/* --- KaTeX Math Direction Fix --- */
/* Ensure KaTeX elements maintain LTR directionality, regardless of parent */
#markdown-output .katex,
#markdown-output .katex-display {
	direction: ltr !important; /* Force LTR for math */
	unicode-bidi: embed !important; /* Isolate directionality */
	text-align: initial !important; /* Reset alignment inherited from RTL parent */
}
/* Center display math specifically */
#markdown-output .katex-display {
	text-align: center !important; /* Center display math visually */
	display: block; /* Ensure block display for centering */
}

/* --- Responsive --- */
@media (max-width: 991.98px) {
	/* Default responsive behavior (non-full-height mode) */
	.preview-container,
	#input-column > .h-100,
	#output-column > .h-100 {
		min-height: auto;
		height: auto;
	}
	#markdown-input,
	#markdown-output {
		min-height: 300px;
		flex-grow: 0; /* Don't grow by default on small screens */
	}

	#output-column.full-width > .h-100 {
		min-height: calc(100vh - 100px);
		height: calc(100vh - 100px); /* Approximate height when input hidden */
	}
	#output-column.full-width > .h-100 #markdown-output {
		flex-grow: 1; /* Allow output to grow when input is hidden */
	}

	header {
		justify-content: flex-start;
		flex-wrap: wrap;
	}

	.panel-header-controls {
		min-height: auto;
		height: auto;
	}
	#markdown-toolbar {
		border-bottom: 1px solid var(--border-color);
		padding-bottom: 0.5rem !important;
	}
	#input-counts {
		margin-left: 0 !important;
		width: 100%;
		justify-content: flex-end;
		padding-top: 0.25rem;
	}
}

/* Style for active direction buttons */
.btn-group > .btn.active {
	z-index: 1; /* Bring active button slightly forward */
	/* Bootstrap's default active styling is usually sufficient */
}

/* --- START: Full Height Mode Styles --- */
html.full-height-mode {
	height: 100vh; /* Use viewport height */
	overflow-y: hidden; /* Prevent html scroll */
}

html.full-height-mode body {
	height: 100vh; /* Full viewport height */
	overflow-y: hidden; /* Prevent body scroll */
	display: flex; /* Use flexbox for body */
	flex-direction: column; /* Stack container vertically */
}

html.full-height-mode .container-fluid {
	flex-grow: 1; /* Make container take remaining height */
	display: flex;
	flex-direction: column;
	padding-top: 0 !important; /* Override default mt-3 */
	padding-bottom: 0.5rem; /* Some padding at the bottom */
	min-height: 0; /* Prevent flex blowout */
	overflow: hidden; /* Prevent container scroll */
}

html.full-height-mode header {
	flex-shrink: 0; /* Prevent header from shrinking */
	margin-bottom: 0.5rem !important; /* Reduce margin in full height mode */
	padding-bottom: 0.5rem !important; /* Slightly reduce padding */
}

html.full-height-mode .row.preview-container {
	flex-grow: 1; /* Make the row take remaining vertical space */
	min-height: 0; /* Override default min-height & prevent flex blowout */
	height: 100%; /* Take full height of flex parent */
	overflow: hidden; /* Prevent row scroll */
	margin-left: 0; /* Remove default row gutters */
	margin-right: 0;
	gap: 0; /* Override g-3 */
}

html.full-height-mode #input-column,
html.full-height-mode #output-column {
	/* Columns already stretch via Bootstrap row, but ensure they handle inner content */
	height: 100%; /* Take full height of the row */
	overflow: hidden; /* Prevent column scroll */
	padding-left: 0.5rem !important; /* Adjust padding */
	padding-right: 0.5rem !important; /* Adjust padding */
	margin-bottom: 0; /* Reset any bottom margin */
}
html.full-height-mode #input-column:not(.hidden) + #output-column {
	border-left: 1px solid var(--border-color); /* Add divider */
}
html.full-height-mode #output-column.full-width {
	border-left: none; /* No divider when full width */
}

html.full-height-mode #input-column > .h-100,
html.full-height-mode #output-column > .h-100 {
	/* These are the direct flex children inside columns */
	height: 100%;
	min-height: 0; /* Override potential min-height issues */
	display: flex;
	flex-direction: column;
}

html.full-height-mode #markdown-toolbar,
html.full-height-mode #direction-controls-container {
	flex-shrink: 0; /* Prevent panel headers from shrinking */
	min-height: 0; /* Reset min-height */
	height: auto; /* Allow wrapping */
	padding-bottom: 0.5rem !important; /* Consistent padding */
	margin-bottom: 0.5rem !important; /* Space before content */
	border-bottom: 1px solid var(--border-color); /* Add separator */
}
html.full-height-mode #direction-controls-container {
	margin-bottom: 0.5rem !important; /* Consistent spacing */
}

html.full-height-mode #markdown-input,
html.full-height-mode #markdown-output {
	flex-grow: 1; /* Take remaining space in the column */
	height: 100%; /* Fill the flex space */
	min-height: 0; /* Override min-height */
	overflow-y: auto; /* Enable vertical scroll IN THE ELEMENT */
	resize: none; /* Ensure textarea cannot be resized manually */
	border: none !important; /* Remove border, parent handles structure */
	padding: 0.8rem !important; /* Adjust padding */
	border-radius: 0 !important; /* Remove rounding */
	background-color: transparent; /* Inherit background from column if needed, or keep distinct */
}
html.full-height-mode #markdown-output {
	background-color: var(--output-bg); /* Keep output bg distinct */
}
html.full-height-mode #markdown-input {
	background-color: var(--body-bg); /* Input bg same as body */
}

/* Reset responsive overrides when in full-height mode */
@media (max-width: 991.98px) {
	/* These styles apply ONLY when full-height-mode is active AND screen is small */
	html.full-height-mode .preview-container,
	html.full-height-mode #input-column > .h-100,
	html.full-height-mode #output-column > .h-100 {
		min-height: 0; /* Ensure no min-height conflicts */
		height: 100%; /* Ensure height is still 100% of parent */
	}

	html.full-height-mode #markdown-input,
	html.full-height-mode #markdown-output {
		min-height: 0; /* Ensure no min-height conflicts */
		flex-grow: 1; /* Ensure they still grow */
		height: 100%;
	}

	html.full-height-mode #output-column.full-width > .h-100 {
		min-height: 0; /* Ensure no min-height conflicts */
		height: 100%; /* Ensure height is still 100% */
	}
	html.full-height-mode .container-fluid {
		padding-top: 0 !important; /* Reset padding */
		padding-bottom: 0.5rem;
	}
	/* Stack columns vertically on small screens in full height mode */
	html.full-height-mode .row.preview-container {
		flex-direction: column;
		height: auto; /* Let content determine height in column mode */
		flex-grow: 1;
	}
	html.full-height-mode #input-column,
	html.full-height-mode #output-column {
		height: 50vh; /* Split height roughly, adjust as needed */
		flex-grow: 1; /* Allow flex grow */
		width: 100%; /* Take full width */
		max-width: 100%;
		flex-basis: auto;
		padding-left: 0.5rem !important;
		padding-right: 0.5rem !important;
		border-left: none; /* Remove divider in vertical mode */
	}
	html.full-height-mode #input-column:not(.hidden) {
		border-bottom: 1px solid var(--border-color); /* Add divider between stacked columns */
	}

	html.full-height-mode #input-column.hidden {
		height: 0; /* Collapse hidden column */
		padding: 0 !important;
		border-bottom: none;
	}
	html.full-height-mode #output-column.full-width {
		height: 100%; /* Take full available height when input hidden */
		border-left: none;
	}
}
/* --- END: Full Height Mode Styles --- */
