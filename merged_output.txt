--- START FILE HIERARCHY ---
└── markdown-renderer/
    ├── index.html
    ├── script.js
    └── style.css
--- END FILE HIERARCHY ---


File: `markdown-renderer/index.html`
```
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Markdown Renderer</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <!-- highlight.js CSS (github-dark theme) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css">
    <!-- Or choose another theme like 'default.min.css', 'atom-one-dark.min.css' etc. -->

    <!-- Custom CSS -->
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <div class="container-fluid mt-3">
        <header class="d-flex justify-content-between align-items-center mb-3 pb-2 border-bottom">
            <h1>Markdown Renderer</h1>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="toggleInputSwitch" checked>
                <label class="form-check-label" for="toggleInputSwitch">Show Input</label>
            </div>
        </header>

        <div class="row g-3 preview-container">
            <!-- Input Column -->
            <div class="col-lg-6" id="input-column">
                <div class="h-100 d-flex flex-column">
                    <label for="markdown-input" class="form-label visually-hidden">Markdown Input</label>
                    <textarea id="markdown-input" class="form-control flex-grow-1" spellcheck="false" placeholder="Enter your Markdown here... Try adding code blocks like:

\`\`\`javascript
function greet(name) {
  console.log(`Hello, ${name}!`);
}
greet('World');
\`\`\`

Or Python:

\`\`\`python
def add(a, b):
  """ Adds two numbers.""" return a + b print(add(5, 3)) \`\`\` "></textarea>
                </div>
            </div>

            <!-- Output Column -->
            <div class=" col-lg-6" id="output-column">
                 <div class="h-100">
                    <div id="markdown-output" class="border p-3 rounded h-100 overflow-auto">
                        <!-- Rendered HTML will appear here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- marked.js -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <!-- highlight.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <!-- Optional: Load specific languages if needed -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/javascript.min.js"></script> -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/python.min.js"></script> -->

    <!-- Bootstrap JS Bundle (includes Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

    <!-- Custom JS -->
    <script src="script.js"></script>
</body>
</html>
```


File: `markdown-renderer/script.js`
```
document.addEventListener('DOMContentLoaded', () => {
    const markdownInput = document.getElementById('markdown-input');
    const markdownOutput = document.getElementById('markdown-output');
    const toggleInputSwitch = document.getElementById('toggleInputSwitch');
    const inputColumn = document.getElementById('input-column');
    const outputColumn = document.getElementById('output-column');

    // --- Debounce function ---
    function debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                func.apply(this, args);
            }, delay);
        };
    }

    // --- Render Markdown ---
    function renderMarkdown() {
        const markdownText = markdownInput.value;

        // Configure marked (WITHOUT the highlight option)
        marked.setOptions({
            breaks: true, // Convert single line breaks to <br>
            gfm: true,    // Enable GitHub Flavored Markdown
            // REMOVED: highlight function - highlight.js will be called after rendering
        });

        // Parse Markdown
        try {
            const html = marked.parse(markdownText);
            markdownOutput.innerHTML = html; // Add the generated HTML to the output area

            // --- Apply Syntax Highlighting AFTER content is in DOM ---
            // Find all 'pre code' blocks within the output area just rendered
            markdownOutput.querySelectorAll('pre code').forEach((block) => {
                // Check if already highlighted to prevent potential issues on re-renders
                // highlightElement adds the 'hljs' class, so we check for its absence
                if (!block.classList.contains('hljs')) {
                    try {
                        // Tell highlight.js to process this specific block
                        hljs.highlightElement(block);
                    } catch (error) {
                        console.error("Highlight.js error on block:", error, block);
                        // Optionally apply a fallback class or style to indicate an error
                        block.classList.add('hljs-error');
                    }
                }
            });

            // --- Enhance Code Blocks (Add Copy Button, Collapse, etc.) ---
            // Run this AFTER highlighting has been applied by hljs.highlightElement
            enhanceCodeBlocks();

        } catch (error) {
            console.error("Markdown parsing error:", error);
            markdownOutput.innerHTML = `<div class="alert alert-danger">Error parsing Markdown. Please check your input.</div>`;
        }
    }

    // --- Enhance Code Blocks (Add Copy Button, Collapse) ---
    function enhanceCodeBlocks() {
        // Keep track of processed pre elements to avoid double wrapping if renderMarkdown runs multiple times quickly
        const processedPres = new Set();

        markdownOutput.querySelectorAll('pre').forEach((preElement) => {
            // Check if this pre element has already been processed in this enhancement pass
            if (processedPres.has(preElement)) {
                return;
            }
            // Check if it's already wrapped (e.g., from a previous render that wasn't fully cleared)
            if (preElement.parentElement.classList.contains('code-block-wrapper')) {
                // It's already enhanced, maybe just update language if needed? Or skip.
                // For simplicity, we can skip re-enhancing fully wrapped blocks.
                processedPres.add(preElement); // Mark its original pre as processed anyway
                return;
            }

            const codeElement = preElement.querySelector('code');
            // If no <code> tag found inside <pre>, skip
            if (!codeElement) return;

            // --- Proceed with enhancement ---

            // 1. Create Wrapper Div
            const wrapper = document.createElement('div');
            wrapper.classList.add('code-block-wrapper');
            // Insert the wrapper right before the pre element in the DOM
            preElement.parentNode.insertBefore(wrapper, preElement);
            // Move the pre element inside the newly created wrapper
            wrapper.appendChild(preElement);
            processedPres.add(preElement); // Mark this <pre> as processed for this run

            // 2. Extract Language (from class added by marked or highlight.js)
            let language = 'plaintext'; // Default language
            // Look for a class starting with 'language-' (marked.js standard)
            const langClass = Array.from(codeElement.classList).find(cls => cls.startsWith('language-'));
            if (langClass) {
                language = langClass.replace('language-', '');
            } else {
                // Fallback: Check if hljs added a language class directly (without prefix)
                // This might happen depending on highlightElement behavior or if no language was specified in markdown
                const potentialLangClass = Array.from(codeElement.classList).find(cls => hljs.getLanguage(cls));
                if (potentialLangClass) {
                    language = potentialLangClass;
                }
                // If no language class found at all, add 'language-plaintext' for consistency
                else if (!codeElement.className.includes('language-')) {
                    codeElement.classList.add('language-plaintext');
                }
            }

            // 3. Create Header Div
            const header = document.createElement('div');
            header.classList.add('code-block-header');

            const langSpan = document.createElement('span');
            langSpan.classList.add('language');
            langSpan.textContent = language; // Use textContent for security against potential XSS in language name

            const iconSpan = document.createElement('span');
            iconSpan.classList.add('collapse-icon');
            iconSpan.title = 'Toggle Collapse';

            header.appendChild(langSpan);
            header.appendChild(iconSpan);

            // Insert the header inside the wrapper, before the <pre> element
            wrapper.insertBefore(header, preElement);

            // 4. Add Copy Button
            const copyButton = document.createElement('button');
            copyButton.classList.add('btn', 'btn-secondary', 'btn-sm', 'copy-code-button');
            copyButton.textContent = 'Copy';
            copyButton.title = 'Copy code to clipboard';
            copyButton.setAttribute('aria-label', 'Copy code to clipboard');
            // Append button directly to the wrapper (CSS will position it absolutely)
            wrapper.appendChild(copyButton);

            // --- Event Listeners for the new elements ---

            // Copy Button Click Event
            copyButton.addEventListener('click', (e) => {
                e.stopPropagation(); // Prevent the click from bubbling up to the header (which toggles collapse)
                // Use innerText to get the visually rendered text content, respecting line breaks correctly
                const codeToCopy = codeElement.innerText;
                navigator.clipboard.writeText(codeToCopy).then(() => {
                    // Visual feedback for successful copy
                    copyButton.textContent = 'Copied!';
                    copyButton.classList.add('copied', 'btn-success'); // Use Bootstrap success class
                    copyButton.classList.remove('btn-secondary');

                    // Reset the button text and style after a short delay
                    setTimeout(() => {
                        copyButton.textContent = 'Copy';
                        copyButton.classList.remove('copied', 'btn-success');
                        copyButton.classList.add('btn-secondary');
                    }, 2000); // Revert after 2 seconds
                }).catch(err => {
                    // Handle potential errors during copy (e.g., browser permission issues)
                    console.error('Failed to copy code: ', err);
                    copyButton.textContent = 'Error';
                    // Reset button text after delay even on error
                    setTimeout(() => { copyButton.textContent = 'Copy'; }, 2000);
                });
            });

            // Collapse/Expand Click Event on Header
            header.addEventListener('click', () => {
                // Toggle the 'collapsed' class on the wrapper element
                wrapper.classList.toggle('collapsed');
            });

            // Optional: Add logic to default to collapsed state for very long code blocks
            // const lineCount = codeElement.innerText.split('\n').length;
            // if (lineCount > 15) { // Example threshold: collapse if more than 15 lines
            //     wrapper.classList.add('collapsed');
            // }
        });
    }


    // --- Toggle Input Area Visibility ---
    function toggleInputArea() {
        const isInputVisible = toggleInputSwitch.checked;
        if (isInputVisible) {
            // Show input column
            inputColumn.classList.remove('hidden');
            // Restore Bootstrap grid classes for split view
            outputColumn.classList.remove('full-width', 'col-lg-12');
            outputColumn.classList.add('col-lg-6');
            inputColumn.classList.add('col-lg-6');

        } else {
            // Hide input column
            inputColumn.classList.add('hidden');
            // Make output column take full width
            inputColumn.classList.remove('col-lg-6'); // Remove size class from hidden input
            outputColumn.classList.remove('col-lg-6');
            outputColumn.classList.add('full-width', 'col-lg-12');
        }
        // Note: Toggling visibility might affect layout, but usually doesn't require
        // a full re-render unless content size changes dramatically based on layout.
    }

    // --- Event Listeners Setup ---
    // Create a debounced version of renderMarkdown to avoid excessive processing during typing
    const debouncedRender = debounce(renderMarkdown, 300); // 300ms delay

    // Call the debounced render function whenever the input textarea content changes
    markdownInput.addEventListener('input', debouncedRender);

    // Call toggleInputArea whenever the switch state changes
    toggleInputSwitch.addEventListener('change', toggleInputArea);

    // --- Initial Setup on Load ---
    renderMarkdown(); // Render any initial content present in the textarea (like the placeholder)
    toggleInputArea(); // Set the initial layout based on the switch's default state (checked)

});
```


File: `markdown-renderer/style.css`
```
/* Ensure columns take full height relative to viewport minus header/margins */
.preview-container,
#input-column > div, /* Target inner div for flex */
#output-column > div {
	/* Target inner div for height */
	min-height: calc(
		100vh - 100px
	); /* Adjust 100px based on header/footer/margins */
}

/* Ensure textarea fills its flex container */
#markdown-input {
	font-family: monospace;
	resize: none; /* Disable manual resize, rely on flexbox */
	/* height: 100% is handled by flex-grow-1, but added as fallback */
	height: 100%;
	/* Prevent disproportionate shrinking */
	min-height: 200px;
}

/* Style the output area */
#markdown-output {
	background-color: #f8f9fa; /* Light background for output */
	word-wrap: break-word; /* Prevent long words from overflowing */
}

/* --- Code Block Enhancements --- */

/* Wrapper for positioning button and handling collapse */
.code-block-wrapper {
	position: relative;
	margin-bottom: 1rem; /* Spacing between code blocks */
	background-color: #282c34; /* Default dark background (matches github-dark highlightjs theme) */
	border-radius: 0.3rem;
	overflow: hidden; /* Crucial for collapse transition and rounded corners */
}

/* Header for language and collapse toggle */
.code-block-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 0.5rem 1rem;
	background-color: rgba(0, 0, 0, 0.2); /* Slightly darker header */
	color: #abb2bf; /* Text color for header (adjust based on theme) */
	font-size: 0.85em;
	cursor: pointer;
	user-select: none; /* Prevent text selection on header */
	border-bottom: 1px solid rgba(255, 255, 255, 0.1); /* Subtle separator */
}

.code-block-header .language {
	font-weight: bold;
	text-transform: uppercase;
	font-family: sans-serif;
}

/* Collapse icon using pseudo-element */
.code-block-header .collapse-icon::before {
	content: "−"; /* Minus sign for expanded state */
	display: inline-block;
	font-weight: bold;
	font-size: 1.2em;
	line-height: 1;
	margin-left: 0.5rem;
	width: 1em;
	text-align: center;
}

/* Change icon when collapsed */
.code-block-wrapper.collapsed .code-block-header .collapse-icon::before {
	content: "+"; /* Plus sign for collapsed state */
}

/* Style the <pre> tag itself within the wrapper */
.code-block-wrapper pre {
	margin: 0; /* Remove default margin */
	padding: 1rem; /* Add padding inside pre */
	border-radius: 0 0 0.3rem 0.3rem; /* Round bottom corners only */
	overflow-x: auto; /* Add horizontal scroll if code lines are long */
	max-height: 600px; /* Set a maximum height before collapsing/scrolling */
	transition: max-height 0.3s ease-out, padding 0.3s ease-out,
		border 0.3s ease-out; /* Smooth collapse animation */
	border-top: none; /* Remove top border as header provides separation */
}

/* Style the <code> tag inside <pre> (where highlight.js applies classes) */
.code-block-wrapper pre code.hljs {
	padding: 0 !important; /* Override highlight.js padding if any */
	background: none !important; /* Use wrapper's background */
	display: block; /* Ensure block display */
	line-height: 1.5;
}

/* Collapsed state styling */
.code-block-wrapper.collapsed pre {
	max-height: 0;
	padding-top: 0;
	padding-bottom: 0;
	overflow: hidden; /* Hide content and scrollbars */
	border-width: 0;
}

/* Copy Button Styling */
.copy-code-button {
	position: absolute;
	top: 0.4rem; /* Adjust vertical position */
	right: 0.5rem; /* Adjust horizontal position */
	z-index: 10; /* Ensure button is above code content */
	opacity: 0; /* Hidden by default */
	transition: opacity 0.2s ease-in-out, background-color 0.2s ease-in-out,
		color 0.2s ease-in-out;
	font-size: 0.75em !important; /* Smaller font size */
	padding: 0.15rem 0.35rem !important; /* Smaller padding */
	border: none;
	line-height: 1.2;
}

/* Show copy button on wrapper hover */
.code-block-wrapper:hover .copy-code-button {
	opacity: 0.7; /* Slightly transparent until hovered directly */
}

/* Full opacity on button hover */
.copy-code-button:hover {
	opacity: 1;
	background-color: #0d6efd; /* Bootstrap primary */
	color: white;
}

/* Styling for 'Copied!' state */
.copy-code-button.copied {
	background-color: #198754 !important; /* Bootstrap success */
	color: white !important;
	opacity: 1;
}

/* Adjust layout when input is hidden */
#input-column.hidden {
	display: none;
}
/* Ensure output takes full width when input is hidden */
#output-column.full-width {
	flex: 0 0 100%;
	max-width: 100%;
}

/* Fix potential Bootstrap table styling conflicts */
#markdown-output table {
	/* Use Bootstrap table classes if available, otherwise provide defaults */
	width: 100%; /* Make tables responsive by default */
	max-width: 100%;
	margin-bottom: 1rem;
	border-collapse: collapse; /* Ensure borders connect */
	background-color: #fff; /* White background for readability */
}
#markdown-output th,
#markdown-output td {
	border: 1px solid #dee2e6; /* Standard Bootstrap border color */
	padding: 0.75rem; /* Standard Bootstrap padding */
	vertical-align: top; /* Align content top */
}
#markdown-output thead th {
	vertical-align: bottom;
	border-bottom: 2px solid #dee2e6; /* Heavier border below header */
	background-color: #e9ecef; /* Light grey background for header */
}

/* Basic responsive adjustments */
@media (max-width: 991.98px) {
	/* Below Bootstrap lg breakpoint */
	.preview-container,
	#input-column > div,
	#output-column > div {
		/* Allow columns to stack naturally, adjust min-height for content */
		min-height: auto;
		/* Maybe a smaller min-height when stacked */
		/* min-height: 40vh; */
	}
	/* Ensure textarea is reasonably sized when stacked */
	#markdown-input {
		min-height: 300px;
	}
	/* Ensure output takes reasonable height when input is hidden on small screens */
	#output-column.full-width > div {
		min-height: calc(100vh - 100px); /* Adjust if needed */
	}
}
```
